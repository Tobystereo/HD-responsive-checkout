// HD Boilerplate
// Version: <!-- $version -->
// URL:
// Version: <!-- $license -->
// inspired by: Rock Hammer http://stuffandnonsense.co.uk/projects/rock-hammer/




// QUICK SEARCH KEYSTROKES

//		=alerts							Alerts
//		=breadcrumbs					Breadcrumbs
//		=buttons						Buttons
//		=help							Help
//		=hero							Hero
//		=inputs							Inputs
//		=navigation						Site navigation
//		=navbar							Navbar
//		=pager							Pager
//		=pagination						Pagination
//		=tables							Tables
//		=tooltip						Tooltip
//		=wells							Wells
//		=popovers 						Popovers



// STEP ONE: BASICS ================================================

// Define the proportional ratio you would like to apply 0.75 leads to a 3x4 aspect ratio and can be applied in font-sizing
$ratio                          : 0.75; //



// Start the ‘atmosphere’ of your design by defining the colours of your pages and text

$bodycolor 						: rgb(255,255,255);
$textcolor 						: rgb(71,63,63);

$primarycolor                   : rgb(62, 109, 157);
$secondarycolor                 : rgb(41, 53, 92);
$tertiarycolor                  : rgb(73, 109, 145);
$neutralcolor                   : rgb(68, 68, 68);
$calltoactioncolor              : rgb(120, 165, 46);
$highlightcolor                 : rgb(48, 196, 240);

$haircolor                      : rgb(62, 109, 157);
$videocolor                     : rgb(210, 40, 40);
$photoscolor                    : rgb(11, 158, 146);
$storecolor                     : rgb(143, 183, 93);
$learncolor                     : rgb(237, 161, 51);
$communitycolor                 : rgb(138, 76, 174);
$aboutcolor                     : rgb(235, 186, 0);

$alertcolor: rgb(184, 32, 37);
$alertbackgroundcolor: lighten($alertcolor, 20);
$warningcolor: rgb(254, 249, 0);
$warningbackgroundcolor:lighten($warningcolor, 20);
$successcolor: $calltoactioncolor;
$successbackgroundcolor: lighten($calltoactioncolor, 20);


@mixin color_swatch($color) {
    width: 96+(48*3)+px;
    display:block;
    overflow:hidden;

    & span {
        display: block;
        width: 48px;
        height: 48px;
        position: relative;
        float: left;

        &:nth-of-type(1) {
            background-color: $color;
            width: 96px;
            height: 96px;
            float: left;
        }

        &:nth-of-type(2) { background-color: darken($color, 10); }
        &:nth-of-type(3) { background-color: darken($color, 20); }
        &:nth-of-type(4) { background-color: darken($color, 30); }
        &:nth-of-type(5) { background-color: lighten($color, 10); }
        &:nth-of-type(6) { background-color: lighten($color, 20); }
        &:nth-of-type(7) { background-color: lighten($color, 30); }
    }

}

// Next are two variables that will be used throughout your design;
// $gutterwidth for horizontal spacing and $baselineheight for vertical rhythm

$gutterwidth 					: 24px;


// Now set media types and features for your CSS3 media queries
// THIS IS NOW DEPRECATED, AS MEDIA QUERIES ARE DEFINED USING THE NEW
// MEDIA-QUERY-BP MIXIN AND ARE DEFINED WITH THE SELECTORS TO WHICH
// THEY ARE NEEDED

// Now set values for your responsive design breakpoints
// Ems are default, but you may use px if you prefer
// Five are included but you may add more

// 480px 	30em
// 600px 	37.5em
// 768px 	48em
// 992px 	62em
// 1382px	86.375em

$bp2 							: 30em;
$bp3 							: 37.5em;
$bp4 							: 48em;
$bp5 							: 62em;
$bp6 							: 86.375em;

// Does your design needs a maximum width to maintain readable line lengths?

$maxwidth						: 90em;

// What is the class name that the media query mixin should use to target
// browsers not supporting media queries?

$no-mq-classname 				: ".lt-ie9";




// STEP TWO: TYPOGRAPHY ================================================

// Now define your design’s typography by setting a base typeface and size
$fontweight_ultralight          : 'HelveticaNeueW01-UltLt';
$fontweight_thin                : 'HelveticaNeueW01-Thin';
$fontweight_thinitalic          : 'HelveticaNeueW01-ThinIt';
$fontweight_light               : 'HelveticaNeueETW01-45Lt';
$fontweight_lightitalic         : 'HelveticaNeueETW01-46Lt';
$fontweight_regular             : 'HelveticaNeueETW01-55Rg';
$fontweight_italic              : 'HelveticaNeueETW01-56It';
$fontweight_medium              : 'HelveticaNeueETW01-65Md';
$fontweight_mediumitalic        : 'HelveticaNeueETW01-66Md';
$fontweight_bold                : 'HelveticaNeueETW01-75Bd';


@mixin font-family($weight) {
    $font-family: '';

    @if $weight == ultralight        { $font-family : $fontweight_ultralight; }
    @else if $weight == thin         { $font-family : $fontweight_thin; }
    @else if $weight == thinitalic   { $font-family : $fontweight_thinitalic; }
    @else if $weight == light        { $font-family : $fontweight_light; }
    @else if $weight == lightitalic  { $font-family : $fontweight_lightitalic; }
    @else if $weight == regular      { $font-family : $fontweight_regular; }
    @else if $weight == italic       { $font-family : $fontweight_italic; }
    @else if $weight == medium       { $font-family : $fontweight_medium; }
    @else if $weight == mediumitalic { $font-family : $fontweight_mediumitalic; }
    @else if $weight == bold         { $font-family : $fontweight_bold; }


    font-family: $font-family, "Helvetica Neue", Helvetica, Arial, sans-serif;
}

/* @todo create font-size mixin that outputs px/rem */
/* @todo create margin/padding mixin using baseline grid */

$basefontfamily 				: $fontweight-regular, "Helvetica Neue", Helvetica, Arial, sans-serif;
$basefontsize 					: 16; // 16
$baselinegrid                   : 8;

$headline_5_fontsize            : round($basefontsize / $ratio); // 21
$headline_4_fontsize            : round($headline_5_fontsize / $ratio); // 28
$headline_3_fontsize            : round($headline_4_fontsize / $ratio); // 38
$headline_2_fontsize            : round($headline_3_fontsize / $ratio); // 51
$headline_1_fontsize            : round($headline_2_fontsize / $ratio); // 67
$titlefontsize                  : round($headline_1_fontsize / $ratio); // 90

$secondaryfontsize              : round($basefontsize * $ratio); // 12
$tertiaryfontsize               : round($secondaryfontsize * $ratio); // 9

@mixin line-height($fontsize) {
    $target-lineheight: line-height-calc($fontsize);
    line-height: adjust_to_baseline_grid($target_lineheight)+px;
    line-height: rem-calc(adjust_to_baseline_grid($target_lineheight));
}

@function line-height-calc($fontsize) {
    $fontsize: round($fontsize);
    $lineheight_ratio: $ratio; //try .6
    $target_lineheight: round($fontsize / $ratio);

    @return $target_lineheight;
}

@function adjust_to_baseline_grid($size) {
    $return_size: $size;

    @if $size % $baselinegrid == 0 {
        $return_size: $size;
    } @else {
        @for $i from 1 through $baselinegrid {
            @if ($size+$i) % $baselinegrid == 0 {
                $return_size: $return_size+$i;
            }
        }
    }

    @return $return_size;
}

@mixin font-size($fontsize) {
    font-size: $fontsize+px;
    font-size: rem-calc($fontsize);
}

@mixin paragraph-margin($fontsize) {
    // following the ratio the top margin will be 3/4 of the font-size
    // the bottom margin will be 1/4 of the font size, all adjusted to fit the baseline grid
    $top-margin: adjust_to_baseline_grid(round($fontsize*$ratio));
    $bottom-margin: adjust_to_baseline_grid(round($fontsize*.25));
    margin: $top-margin+px 0 $bottom-margin+px;
    margin: rem-calc($top-margin)+px 0 rem-calc($bottom-margin);
}

// Maybe you want to create rems with pixels
 $rem-base: 16 !default; //Set the value corresponding to body font size. In this case, you should set as: body {font-size: 62.5%;}
 @function rem-calc($pxWidth) {
   @return $pxWidth / $rem-base * 1rem;
 }


$transition: all 0.3s ease-out;